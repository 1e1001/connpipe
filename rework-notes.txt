# connpipe rework

## log format:
[2022-09-16 23:40:00.670 LEVEL type/id] message
[2022-09-16 23:40:00.670 LEVEL module] message

## address format:
config: {connector}/{addr}:{port}!{subport}

addr shorthands:
- $4, $6, $n -> local, 127.0.0.1, [::1], localhost
- *4, *6 -> all, 0.0.0.0, [::],

## systems
- loading logic types
- instantiating types
- startup
- shutdown
- handling requests
### phase 1: instantiate systems
load default logic types
$CONFIG/config.toml - initial loading
[id]
type = "dylib"
path = "dylib/libid{dylib}"
# .dll/.so/.dylib
[id2]
type = "process"
path = "proc/id2{exe}"
# .exe//
[id3]
type = "lua"
path = "lua/main.lua"
[id4]
type = "table"
path = "table.toml"

## alternative system api:
- no instantiation of "types" of systems, systems are instead interned based on id (still re-loads systems, but dropped after determining it's interned)
- hashmap of system id -> Box<dyn System>
	- example: 1e1001.connpipe.core.tcp_connector
		- not a reverse-dns, since those have the issue of needing to own a domain
- systems can be dynamically generated (use a struct that reports an id based on how it was instantiated)
- systems only unload during a full config reload (all unload in reverse order, then re-loaded)
- systems export some number of routers, connectors, and converters
	- routers are:
		- an id (single string)
		- a set of addresses to bind
		- a function to map addresses to other addresses
	- connectors are:
		- an id (single string)
		- an address type
			- recommended to have some sort of optional !multiplex
			- some number of aliases
				- connector.{alias}
				- system.name.triple.connector.{alias}
				- e.g. websocket has aliases [ws, wss, websocket]
				- only the alias component is given to the connector
			- has methods for from/to string
				- format: connector:[...]
					- tcp:addr:port!multiplex
					- udp:addr:port
					- ws:addr:port/path!multiplex
					- 1e1001.connpipe.core.tcp:addr:port
				- will probably use some shared parser library
			- methods to convert from/to a list of name+value (u*, i*, f*, bool, string, null)
				- no bytestring support anymore; it's kinda painful. if you want to send arbitrary bytes then suffer.
				- tcp -> addr:string port:u16 multiplex:null|string
				- ws -> addr:string port:u16 path:null|string multiplex:null|string
		- method to bind to an address
		- connection structure
			- AsyncRead / AsyncWrite

struct SystemEnv {
	async register_system(Box<dyn System>);
	async register_router(Box<dyn Router>);
	async register_connector(Box<dyn Connector>);
}

trait System {
	id -> String;
	async load(SystemEnv) -> CRes<()>;
	ops::Drop
}

## why do i keep adding new sections instead of just replacing them?
at some point my git log's going to have like -yes lines, anyways

- addresses:
	- defined by a connector
	- a set of non-unique shorthand id's
		- e.g. websocket has "websocket" and "ws"
			- it will error if you use a vague id
		- can also be referenced by connector id
			- e.g. 1e1001.core.conn.tcp:...
			- prefix/suffix codes also work, e.g. 1e1001..tcp:... or 1e1001..core.ws:
	- contains pure and impure parts
		- pure is the "default" address type (e.g. for tcp it's ip:port)
		- impure is the multiplex (prev. subport) component if the connection type supports one
			- impure parts are (usually) optional
	- mappings to and from general types
		- strings
		- comp-table (HashMap<String, Value>, where value in u*, i*, f*, String, bool, HashMap<String, Value>, Vec<Value>)
- routers:
	- instantiated off of a loaded template type
	- a unique, user-defined id as to allow recursive routing
	- a list of pure addresses to bind to (usually equivalent to all the ones it can route)
		- needs to be explicitly enabled by the user in some mannar
	- a programmatic mapping from one impure addresses to another
	- router *user* must know the address types, router can optionally know (e.g. to provide better syntax)
		- if the router does not know the address type, it uses the comp-table
- connectors:
	- singleton
	- a globally-unique id
		- dot-seperated list of utf-8 names
			- not reverse-dns, because dns sucks, a similar format is recommended though
			- e.g. 1e1001.core.conn.tcp
	- an address type
	- a function to bind to a pure address
		- connections are returned as impure addresses
	- a function to connect to an impure address
	- a stream type (async read/write, and RAII)
- etc. impl:
	- `tracing` for logging
	- "manager" pattern for creating instances of things
- loading process
	- load core / builtin plugins
		- 1e1001.core.conn.tcp
		- 1e1001.core.conn.ws
		- 1e1001.core.route.table
		- 1e1001.core.route.dylib
		- 1e1001.core.route.process
		- 1e1001.core.route.lua

## routing
- a connector recieves a connection
- it sends the request to the configured router

## main task
- event loop: (startup: config reload)
	- event: config reload
		- unload old routers (drop)
		- load config file from $CONFIG/config.toml
		- initialize Routers
	- event: listen address reload
		- kill conn tasks
		- start conn tasks
	- event: conn task error
		- restart conn task
	- event: interrupt
		- kill conn and pipe tasks
		- unload routers (drop)
		- quit event loop

## conn task
- initialize ConnectorSource
- loop
	- wait for connection
	- start pipe task

## pipe task
- read magic / subport
- route event -> main
- wait for route response
- construct ConnectorSink
- forward connection
